---
# Source: retail-store-sample-ui-chart/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ui
  labels:
    helm.sh/chart: ui-1.0.0
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: ui
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
---
# Source: retail-store-sample-ui-chart/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ui
data:
  RETAIL_UI_ENDPOINTS_CATALOG: false #http://catalog
  RETAIL_UI_ENDPOINTS_CARTS: false #http://carts
  RETAIL_UI_ENDPOINTS_CHECKOUT: false #http://checkout
  RETAIL_UI_ENDPOINTS_ORDERS: false #http://orders
  PORT: "8080" # Add this to ensure app listens on correct port
---
# Source: retail-store-sample-ui-chart/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ui
  labels:
    helm.sh/chart: ui-1.0.0
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: ui
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: http # Revert to use port name
    protocol: TCP
    name: http
    nodePort: 30000
  selector:
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: ui
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
---
# Source: retail-store-sample-ui-chart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui
  labels:
    helm.sh/chart: ui-1.0.0
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: ui
    app.kubernetes.io/component: service
    app.kubernetes.io/owner: retail-store-sample
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: ui
      app.kubernetes.io/instance: ui
      app.kubernetes.io/component: service
      app.kubernetes.io/owner: retail-store-sample
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: ui
        app.kubernetes.io/instance: ui
        app.kubernetes.io/component: service
        app.kubernetes.io/owner: retail-store-sample
    spec:
      serviceAccountName: ui
      securityContext:
        fsGroup: 1000
      containers:
      - name: ui
        env:
        - name: JAVA_OPTS
          value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
        - name: PORT # Add PORT environment variable
          value: "8080"
        - name: METADATA_KUBERNETES_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: METADATA_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: METADATA_KUBERNETES_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        envFrom:
        - configMapRef:
            name: ui
        securityContext:
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        image: "public.ecr.aws/aws-containers/retail-store-sample-ui:1.0.0"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 10
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 128m
            memory: 512Mi
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
